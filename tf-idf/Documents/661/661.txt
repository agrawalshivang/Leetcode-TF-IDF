on a single-threaded cpu, we execute a program containing n functions. each function has a unique id between 0 and n-1.
function calls are stored in a call stack: when a function call starts, its id is pushed onto the stack, and when a function call ends, its id is popped off the stack. the function whose id is at the top of the stack is the current function being executed. each time a function starts or ends, we write a log with the id, whether it started or ended, and the timestamp.
you are given a list logs, where logs[i] represents the ith log message formatted as a string "{function_id}:{"start" | "end"}:{timestamp}". for example, "0:start:3" means a function call with function id 0 started at the beginning of timestamp 3, and "1:end:2" means a function call with function id 1 ended at the end of timestamp 2. note that a function can be called multiple times, possibly recursively.
a function's exclusive time is the sum of execution times for all function calls in the program. for example, if a function is called twice, one call executing for 2 time units and another call executing for 1 time unit, the exclusive time is 2 + 1 = 3.
return the exclusive time of each function in an array, where the value at the ith index represents the exclusive time for the function with id i.
