sql schema
table: movies
+---------------+---------+
| column name   | type    |
+---------------+---------+
| movie_id      | int     |
| title         | varchar |
+---------------+---------+
movie_id is the primary key for this table.
title is the name of the movie.
table: users
+---------------+---------+
| column name   | type    |
+---------------+---------+
| user_id       | int     |
| name          | varchar |
+---------------+---------+
user_id is the primary key for this table.
table: movierating
+---------------+---------+
| column name   | type    |
+---------------+---------+
| movie_id      | int     |
| user_id       | int     |
| rating        | int     |
| created_at    | date    |
+---------------+---------+
(movie_id, user_id) is the primary key for this table.
this table contains the rating of a movie by a user in their review.
created_at is the user's review date.
write an sql query to:
find the name of the user who has rated the greatest number of movies. in case of a tie, return the lexicographically smaller user name.
find the movie name with the highest average rating in february 2020. in case of a tie, return the lexicographically smaller movie name.
the query result format is in the following example.
