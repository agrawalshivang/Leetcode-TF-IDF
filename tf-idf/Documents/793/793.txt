you are given a 0-indexed m x n integer matrix grid consisting of distinct integers from 0 to m * n - 1. you can move in this matrix from a cell to any other cell in the next row. that is, if you are in cell (x, y) such that x < m - 1, you can move to any of the cells (x + 1, 0), (x + 1, 1), ..., (x + 1, n - 1). note that it is not possible to move from cells in the last row.
each possible move has a cost given by a 0-indexed 2d array movecost of size (m * n) x n, where movecost[i][j] is the cost of moving from a cell with value i to a cell in column j of the next row. the cost of moving from cells in the last row of grid can be ignored.
the cost of a path in grid is the sum of all values of cells visited plus the sum of costs of all the moves made. return the minimum cost of a path that starts from any cell in the first row and ends at any cell in the last row.
