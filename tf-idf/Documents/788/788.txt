there is an m x n binary grid matrix with all the values set 0 initially. design an algorithm to randomly pick an index (i, j) where matrix[i][j] == 0 and flips it to 1. all the indices (i, j) where matrix[i][j] == 0 should be equally likely to be returned.
optimize your algorithm to minimize the number of calls made to the built-in random function of your language and optimize the time and space complexity.
implement the solution class:
solution(int m, int n) initializes the object with the size of the binary matrix m and n.
int[] flip() returns a random index [i, j] of the matrix where matrix[i][j] == 0 and flips it to 1.
void reset() resets all the values of the matrix to be 0.
